generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.sqlite"
}

model User {
  id               String            @id
  name             String
  email            String            @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  tasks            Task[]
  taskParticipants TaskParticipant[]
  taskTags         TaskTag[]
  accounts         Account[]
  sessions         Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id           String            @id @default(cuid())
  userId       String
  title        String
  description  String?
  start        DateTime
  end          DateTime
  allDay       Boolean           @default(false)
  status       TaskStatus        @default(PENDING)
  repeatRuleId String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  priority     TaskPriority      @default(NORMAL)
  color        String?
  reminders    Reminder[]
  repeatRule   RepeatRule?       @relation(fields: [repeatRuleId], references: [id])
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants TaskParticipant[]
  tags         TaskTag[]         @relation("TaskToTaskTag")

  @@index([userId, start])
}

model RepeatRule {
  id         String    @id @default(cuid())
  frequency  Frequency
  interval   Int       @default(1)
  byWeekday  String?
  byMonthday String?
  count      Int?
  until      DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tasks      Task[]
}

model Reminder {
  id        String         @id @default(cuid())
  taskId    String
  offsetMin Int
  method    ReminderMethod @default(PUSH)
  createdAt DateTime       @default(now())
  task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskParticipant {
  id      String          @id @default(cuid())
  taskId  String
  userId  String
  role    ParticipantRole @default(VIEWER)
  addedAt DateTime        @default(now())
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  task    Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model TaskTag {
  id        String   @id @default(cuid())
  name      String
  userId    String
  color     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("TaskToTaskTag")

  @@unique([userId, name])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderMethod {
  PUSH
  EMAIL
  LOCAL
}

enum ParticipantRole {
  VIEWER
  EDITOR
  OWNER
}
